{"project": "unique-factory", "project_url": "https://github.com/flatsurf/unique-factory", "show_commit_url": "https://github.com/flatsurf/unique-factory/commit/", "hash_length": 8, "revision_to_hash": {"34": "ca73111ffecdb835432a95962b8f1f8813a4fe6c", "41": "3e0111fdbb0b64822cf71ab8d26b19688c74c4b1", "45": "0a96bcf0c83f3a4e15b0ce46145da84ba7f4adca", "50": "7ce90e5661d505b2e4ceb20ecd79325dbaa0eb1d", "55": "f1014aa099a75c72aece78d37dbed2d3ca0ef2df", "57": "4aa841f156ced809c587983d9895fd1803264210", "67": "5cb7139cf457f29b52b06dbf1d9880e1d46dc601", "76": "65fb87ad73a0bfcc37ee2e90fc5a156fa8571618", "80": "bd14cae487511616c4ae5e3bc9ae81edbdf3c01e", "84": "39dbfd6ab313762a5bcffb8d8ff021503c88487d"}, "revision_to_date": {"34": 1642633612000, "41": 1642634346000, "45": 1642634750000, "50": 1642635723000, "55": 1642636308000, "57": 1642636423000, "67": 1642651904000, "76": 1642741765000, "80": 1642748965000, "84": 1642749177000}, "params": {"arch": ["x86_64"], "cpu": ["Standard_DS2_v2"], "machine": ["Azure"], "os": ["Linux"], "ram": ["61830880"], "python": ["3.9"], "automake": [""], "benchmark==1.5.0": [""], "ccache": [""], "cppasv": [""], "cxx-compiler": [""], "libtool": [""], "make": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "python": "3.9", "automake": "", "benchmark==1.5.0": "", "ccache": "", "cppasv": "", "cxx-compiler": "", "libtool": "", "make": "", "branch": "master"}], "benchmarks": {"Create.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "Create.track_time", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "CreateWithKeepAlive.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "CreateWithKeepAlive.track_time", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}, "GetFromCache.track_time": {"code": "class <locals>:\n    def run_benchmark(self, params=None):\n        filter = f\"{name}\"\n        if params:\n            filter = f\"{name}/{params.replace(', ', '/')}\"\n        out = subprocess.check_output([benchmark, f\"--benchmark_filter={filter}\", \"--benchmark_format=json\"])\n    \n        import json\n        out = json.loads(out)\n    \n        assert(len(out[\"benchmarks\"]) == 1)\n        time = out[\"benchmarks\"][0][\"cpu_time\"]\n        unit = out[\"benchmarks\"][0][\"time_unit\"]\n    \n        if unit == \"s\":\n            time *= 1000\n            unit = \"ms\"\n        if unit == \"ms\":\n            time *= 1000\n            unit = \"us\"\n        if unit == \"us\":\n            time *= 1000\n            unit = \"ns\"\n    \n        assert(unit == \"ns\")\n    \n        return time", "name": "GetFromCache.track_time", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "ns", "version": "0"}}, "machines": {"Azure": {"arch": "x86_64", "cpu": "Standard_DS2_v2", "machine": "Azure", "os": "Linux", "ram": "61830880", "version": 1}}, "tags": {"0.1.0": 57, "0.1.1": 67, "0.2.0": 76, "0.2.1": 84}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}